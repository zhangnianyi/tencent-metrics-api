package main

import (
	"encoding/json"
	"fmt"
	"tencent-monitor/modles"
	"time"

	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
	monitor "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/monitor/v20180724"
)

func main() {
	starttime1 := time.Now().Unix()
	starttime2 := starttime1 - 86400
	start3 := time.Unix(starttime2, 0).Format("2006-01-02 15:04:05")
	emdtime := time.Now().Format("2006-01-02 15:04:05")
	fmt.Println(start3, emdtime)
	credential := common.NewCredential(
		"AKvUn",
		"ED1ZqRM",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "monitor.tencentcloudapi.com"
	client, _ := monitor.NewClient(credential, "ap-guangzhou", cpf)

	request := monitor.NewGetMonitorDataRequest()

	request.Namespace = common.StringPtr("QCE/WAF")

	request.MetricName = common.StringPtr("Attack")
	//request.Period = common.Uint64Ptr(3600)
	//request.StartTime = common.StringPtr(start3)
	//request.EndTime = common.StringPtr(emdtime)
	request.Instances = []*monitor.Instance{
		&monitor.Instance{
			Dimensions: []*monitor.Dimension{
				&monitor.Dimension{
					Name:  common.StringPtr("domain"),
					Value: common.StringPtr("rio.scdsjzx.cn"),
				},
				&monitor.Dimension{
					Name:  common.StringPtr("edition"),
					Value: common.StringPtr("1"),
				},
			},
		},
	}

	response, err := client.GetMonitorData(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return
	}
	if err != nil {
		panic(err)
	}
	//fmt.Printf("%s", response.ToJsonString())
	a := response.ToJsonString()
	c1 := &modles.AutoGenerated{}
	err = json.Unmarshal([]byte(a), c1)
	if err != nil {
		fmt.Println("json unmarshal failed!")
		return
	}
	for _, v := range c1.Response.DataPoints {
		//fmt.Println(v.Values)
		//fmt.Printf("%T",v.Values)
		//max :=GetMaxNum(v.Values)
		//fmt.Println(v.Values)
		data := 0
		for _, v := range v.Values {
			data += v

		}
		//fmt.Println(data)
		fmt.Printf("防火墙今日攻击次数为%d次",data)
	}
}