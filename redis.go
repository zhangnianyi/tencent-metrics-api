package main

import (
	"encoding/json"
	"fmt"
	"strconv"
	"tencent-monitor/Utils"
	"time"

	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
	monitor "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/monitor/v20180724"
)
type AutoGeneratedredis struct {
	Response struct {

		MetricName string `json:"MetricName"`
		DataPoints []struct {
			Dimensions []struct {
				Name string `json:"Name"`
				Value string `json:"Value"`
			} `json:"Dimensions"`
			Values []float64 `json:"Values"`
		} `json:"DataPoints"`
	} `json:"Response"`
}
func main() {
	starttime1 :=time.Now().Unix()
	starttime2 :=starttime1-300
	start3 :=time.Unix(starttime2,0).Format("2006-01-02 15:04:05")
	emdtime :=time.Now().Format("2006-01-02 15:04:05")

	credential := common.NewCredential(
		"Ayd06vUn",
		"ED1j12mFRM",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "monitor.tencentcloudapi.com"
	client, _ := monitor.NewClient(credential, "ap-shanghai", cpf)

	request := monitor.NewGetMonitorDataRequest()

	request.Namespace = common.StringPtr("QCE/REDIS_MEM")
	request.MetricName = common.StringPtr("MemUtil")
	request.Period = common.Uint64Ptr(60)
	request.StartTime = common.StringPtr(start3)
	request.EndTime = common.StringPtr(emdtime)
	request.Instances = []*monitor.Instance {
		&monitor.Instance {
			Dimensions: []*monitor.Dimension {
				&monitor.Dimension {
					Name: common.StringPtr("instanceid"),
					Value: common.StringPtr("crs-mg9huy08"),
				},
			},
		},
	}

	response, err := client.GetMonitorData(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return
	}
	if err != nil {
		panic(err)
	}
	//fmt.Printf("%s", response.ToJsonString())
	a:= response.ToJsonString()
	fmt.Println(a)
	c1 := &AutoGeneratedredis{}
	err = json.Unmarshal([]byte(a), c1)
	if err != nil {
		fmt.Println("json unmarshal failed!")
		return
	}
	fmt.Println(c1.Response.DataPoints)
	for _,v :=range c1.Response.DataPoints{
		//fmt.Println(v.Values)
		//fmt.Printf("%T",v.Values)
		max := Utils.GetMaxNum(v.Values)
		fmt.Println(max)
	}
	var x float64 =3.623
	formattedVal := fmt.Sprintf("%.2f", x)
	roundedVal, _ := strconv.ParseFloat(formattedVal, 64)
	fmt.Println(roundedVal)

}

