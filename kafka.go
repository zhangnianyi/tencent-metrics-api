package main

import (
	"encoding/json"
	"fmt"
	"tencent-monitor/Utils"
	"time"

	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
	monitor "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/monitor/v20180724"
)
type AutoGenerated struct {
	Response struct {
		DataPoints []struct {
			Dimensions []struct {
				Value string `json:"Value"`
			} `json:"Dimensions"`
			Values []int `json:"Values"`
		} `json:"DataPoints"`
	} `json:"Response"`
}


func main() {
	starttime1 :=time.Now().Unix()
	starttime2 :=starttime1-300
	start3 :=time.Unix(starttime2,0).Format("2006-01-02 15:04:05")
	emdtime :=time.Now().Format("2006-01-02 15:04:05")
	//fmt.Println(start3,emdtime)
	credential := common.NewCredential(
		"AKIDaz7zbw",
		"ED1Zqq",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "monitor.tencentcloudapi.com"
	client, _ := monitor.NewClient(credential, "ap-shanghai", cpf)

	request := monitor.NewGetMonitorDataRequest()

	request.Namespace = common.StringPtr("QCE/CKAFKA")
	request.MetricName = common.StringPtr("InstanceProCount")
	request.Period = common.Uint64Ptr(60)
	request.StartTime = common.StringPtr(start3)
	request.EndTime = common.StringPtr(emdtime)
	request.Instances = []*monitor.Instance {
		&monitor.Instance {
			Dimensions: []*monitor.Dimension {
				&monitor.Dimension {
					Name: common.StringPtr("instanceId"),
					Value: common.StringPtr("ckafka-65nd8xa9"),
				},
			},
		},
	}

	response, err := client.GetMonitorData(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return
	}
	if err != nil {
		panic(err)
	}
	a:= response.ToJsonString()
	c1 := &AutoGenerated{}
	err = json.Unmarshal([]byte(a), c1)
	if err != nil {
		fmt.Println("json unmarshal failed!")
		return
	}
	//fmt.Println(c1.Response.DataPoints)
	max :=0
	for _,v :=range c1.Response.DataPoints{
	//fmt.Println(v.Values)
	//fmt.Printf("%T",v.Values)
	max =GetMaxNum(v.Values)
	//fmt.Println(max)

	}
	//fmt.Println(max)
	fmt.Printf("kafka生产条数为%d条 \n",max)
	const1 :=cosumrtcount()
	fmt.Printf("kafka消费条数为%d条 \n",const1)
	Liuliangshengchan()

}

func GetMaxNum(ary []int) int {
	if len(ary) == 0 {
		return 0
	}
	maxVal := ary[0]
	for i := 1; i < len(ary); i++ {
		if maxVal < ary[i] {
			maxVal = ary[i]
		}
	}
	return maxVal
}
func cosumrtcount() int{
	starttime1 :=time.Now().Unix()
	starttime2 :=starttime1-300
	start3 :=time.Unix(starttime2,0).Format("2006-01-02 15:04:05")
	emdtime :=time.Now().Format("2006-01-02 15:04:05")
	//fmt.Println(start3,emdtime)
	credential := common.NewCredential(
		"AUn",
		"FRM",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "monitor.tencentcloudapi.com"
	client, _ := monitor.NewClient(credential, "ap-shanghai", cpf)

	request := monitor.NewGetMonitorDataRequest()

	request.Namespace = common.StringPtr("QCE/CKAFKA")
	request.MetricName = common.StringPtr("InstanceConCount")
	request.Period = common.Uint64Ptr(60)
	request.StartTime = common.StringPtr(start3)
	request.EndTime = common.StringPtr(emdtime)
	request.Instances = []*monitor.Instance {
		&monitor.Instance {
			Dimensions: []*monitor.Dimension {
				&monitor.Dimension {
					Name: common.StringPtr("instanceId"),
					Value: common.StringPtr("ckafka-65nd8xa9"),
				},
			},
		},
	}

	response, err := client.GetMonitorData(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
	}
	if err != nil {
		panic(err)
	}
	a:= response.ToJsonString()
	c1 := &AutoGenerated{}
	err = json.Unmarshal([]byte(a), c1)
	if err != nil {
		fmt.Println("json unmarshal failed!")
	}
	//fmt.Println(c1.Response.DataPoints)
	max :=0
	for _,v :=range c1.Response.DataPoints{
		//fmt.Println(v.Values)
		//fmt.Printf("%T",v.Values)
		max =GetMaxNum(v.Values)

	}
	return max
}
type AutoGeneratedliuliang struct {
	Response struct {
	Period int `json:"Period"`
	MetricName string `json:"MetricName"`
	DataPoints []struct {
	Dimensions []struct {
	Name string `json:"Name"`
	Value string `json:"Value"`
} `json:"Dimensions"`
	Timestamps []int `json:"Timestamps"`
	Values []float64 `json:"Values"`
} `json:"DataPoints"`
	StartTime string `json:"StartTime"`
	EndTime string `json:"EndTime"`
	RequestID string `json:"RequestId"`
} `json:"Response"`
}
func Liuliangshengchan() {
	starttime1 :=time.Now().Unix()
	starttime2 :=starttime1-300
	start3 :=time.Unix(starttime2,0).Format("2006-01-02 15:04:05")
	emdtime :=time.Now().Format("2006-01-02 15:04:05")
	//fmt.Println(start3,emdtime)
	credential := common.NewCredential(
		"6vUn",
		"RM",
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "monitor.tencentcloudapi.com"
	client, _ := monitor.NewClient(credential, "ap-shanghai", cpf)

	request := monitor.NewGetMonitorDataRequest()

	request.Namespace = common.StringPtr("QCE/CKAFKA")
	request.MetricName = common.StringPtr("InstanceProFlow")
	request.Period = common.Uint64Ptr(60)
	request.StartTime = common.StringPtr(start3)
	request.EndTime = common.StringPtr(emdtime)
	request.Instances = []*monitor.Instance {
		&monitor.Instance {
			Dimensions: []*monitor.Dimension {
				&monitor.Dimension {
					Name: common.StringPtr("instanceId"),
					Value: common.StringPtr("ckafka-65nd8xa9"),
				},
			},
		},
	}

	response, err := client.GetMonitorData(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
	}
	if err != nil {
		panic(err)
	}
	a:= response.ToJsonString()
	//fmt.Println(a)
	c1 := &AutoGeneratedliuliang{}
	err = json.Unmarshal([]byte(a), c1)
	if err != nil {
		fmt.Println("json unmarshal failed!")
	}
	//fmt.Println(c1.Response.DataPoints)

	for _,v :=range c1.Response.DataPoints{
		//fmt.Println(Utils.GetMaxNum(v.Values))
		fmt.Printf("kafka带宽为%f",Utils.GetMaxNum(v.Values))
		}

}